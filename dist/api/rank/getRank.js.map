{"version":3,"sources":["../../../src/api/rank/getRank.js"],"names":["validator","require","isNull","setError","errorObject","errorMessage","result","error","db","req","res","query","startDate","endDate","company","domain","searchEngine","json","isByteLength","min","max","undefined","dateRegEx","match","ifCompanyExistQuery","ifDateExistQuery","searchEngineQuery","console","log","success"],"mappings":";;;;;AAAA,IAAMA,YAAYC,QAAQ,WAAR,CAAlB;AACA,IAAMC,SAASD,QAAQ,eAAR,CAAf;;AAEA,IAAME,WAAW,SAAXA,QAAW,CAACC,WAAD,EAAcC,YAAd,EAA+B;AAC9C,MAAIC,SAAS,EAAb;AACAA,SAAOC,KAAP,GAAe,IAAf;AACAD,SAAOD,YAAP,GAAsBA,YAAtB;AACA,SAAOC,MAAP;AACD,CALD;;kBAOe,UAACE,EAAD;AAAA,SAAQ,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,qBAS/BD,GAT+B,CAEjCE,KAFiC;AAAA,QAG/BC,SAH+B,cAG/BA,SAH+B;AAAA,QAI/BC,OAJ+B,cAI/BA,OAJ+B;AAAA,QAK/BC,OAL+B,cAK/BA,OAL+B;AAAA,QAM/BC,MAN+B,cAM/BA,MAN+B;AAAA,QAO/BC,YAP+B,cAO/BA,YAP+B;;;AAWnC,QAAIZ,cAAc;AAChBG,aAAO,KADS;AAEhBF,oBAAc;AAFE,KAAlB;;AAKA,QAAI,CAACU,MAAL,EAAa;AACXX,oBAAcD,SAASC,WAAT,EAAsB,oBAAtB,CAAd;AACA,aAAOM,IAAIO,IAAJ,CAASb,WAAT,CAAP;AACD;AACD,QAAI,CAACJ,UAAUkB,YAAV,CAAuBH,MAAvB,EAA+B;AAClCI,WAAK,CAD6B;AAElCC,WAAKC;AAF6B,KAA/B,CAAL,EAGI;AACFjB,oBAAcD,SAASC,WAAT,EAAsB,oBAAtB,CAAd;AACA,aAAOM,IAAIO,IAAJ,CAASb,WAAT,CAAP;AACD;AACD,QAAMkB,YAAY,qBAAlB;AACA,QAAIV,SAAJ,EAAe;AACb,UAAIV,OAAOU,UAAUW,KAAV,CAAgBD,SAAhB,CAAP,CAAJ,EAAwC;AACtClB,sBAAcD,SAASC,WAAT,EAAsB,qCAAtB,CAAd;AACA,eAAOM,IAAIO,IAAJ,CAASb,WAAT,CAAP;AACD;AACF;;AAED,QAAIS,OAAJ,EAAa;AACX,UAAIX,OAAOW,QAAQU,KAAR,CAAcD,SAAd,CAAP,CAAJ,EAAsC;AACpClB,sBAAcD,SAASC,WAAT,EAAsB,mCAAtB,CAAd;AACA,eAAOM,IAAIO,IAAJ,CAASb,WAAT,CAAP;AACD;AACF;;AAED,QAAMoB,sBAAsBV,8BAA4BA,OAA5B,SAAyC,EAArE;AACA,QAAMW,mBAAmBb,aAAaC,OAAb,mCAAoDD,SAApD,uBAA6EC,OAA7E,aAAzB;AACA,QAAMa,oBAAoBV,+DAA6DA,YAA7D,sCAA4G,yDAAtI;;AAEA,QAAML,wPAI6Ca,mBAJ7C,aAKHE,iBALG,6BAMaX,MANb,cAOHU,gBAPG,+BAAN;;AAWA;AACAE,YAAQC,GAAR,CAAYjB,KAAZ;;AAEAH,OAAGG,KAAH,CAASA,KAAT,EAAgB,UAACJ,KAAD,EAAQD,MAAR,EAAmB;AACjC,UAAIC,KAAJ,EAAW;AACT,eAAOG,IAAIO,IAAJ,CAAS;AACdY,mBAAS,KADK;AAEdtB;AAFc,SAAT,CAAP;AAID;AACDG,UAAIO,IAAJ,CAAS;AACPY,iBAAS,IADF;AAEPd,sBAFO;AAGPT;AAHO,OAAT;AAKD,KAZD;AAaD,GAzEc;AAAA,C","file":"getRank.js","sourcesContent":["const validator = require('validator');\nconst isNull = require('lodash/isNull');\n\nconst setError = (errorObject, errorMessage) => {\n  let result = {};\n  result.error = true;\n  result.errorMessage = errorMessage;\n  return result;\n};\n\nexport default (db) => (req, res) => {\n  const {\n    query: {\n      startDate,\n      endDate,\n      company,\n      domain,\n      searchEngine,\n    },\n  } = req;\n\n  let errorObject = {\n    error: false,\n    errorMessage: '',\n  };\n\n  if (!domain) {\n    errorObject = setError(errorObject, 'Domain not present');\n    return res.json(errorObject);\n  }\n  if (!validator.isByteLength(domain, {\n    min: 1,\n    max: undefined\n  })) {\n    errorObject = setError(errorObject, 'Domain length is 0');\n    return res.json(errorObject);\n  }\n  const dateRegEx = /^\\d{4}-\\d{2}-\\d{2}$/;\n  if (startDate) {\n    if (isNull(startDate.match(dateRegEx))) {\n      errorObject = setError(errorObject, 'Start Date not in YYYY-MM-DD format');\n      return res.json(errorObject);\n    }\n  }\n\n  if (endDate) {\n    if (isNull(endDate.match(dateRegEx))) {\n      errorObject = setError(errorObject, 'End Date not in YYYY-MM-DD format');\n      return res.json(errorObject);\n    }\n  }\n\n  const ifCompanyExistQuery = company ? `AND cn.name = \"${company}\"` : '';\n  const ifDateExistQuery = startDate || endDate ? `AND logDate between date('${startDate}') and date('${endDate}')` : ``;\n  const searchEngineQuery = searchEngine ? `INNER JOIN searchengines se ON se.value = \"${searchEngine}\" AND se.id = r.searchEngineId` : 'RIGHT JOIN searchengines se ON se.id = r.searchEngineId';\n\n  const query = `SELECT r.rank, cn.name, r.logDate, k.keyword, se.value as searchEngine\n   FROM ranks r\n   INNER JOIN keywords k ON r.keywordId = k.id\n   INNER JOIN domains d ON k.domain_id = d.id\n   INNER JOIN companynames cn ON cn.id = companyId ${ifCompanyExistQuery}\n   ${searchEngineQuery}\n   WHERE domain = \"${domain}\"\n   ${ifDateExistQuery}\n   ORDER BY logDate\n   `;\n\n  //WHERE\n  console.log(query);\n\n  db.query(query, (error, result) => {\n    if (error) {\n      return res.json({\n        success: false,\n        error,\n      });\n    }\n    res.json({\n      success: true,\n      domain,\n      result\n    });\n  });\n}\n"]}