{"version":3,"sources":["../../../src/api/sync/scrapAndWriteToDb.js"],"names":["forEach","require","map","findIndex","merge","sortBy","appConstants","moment","scrapModule","db","taskList","start","Date","getTime","keywordQuery","urlQuery","rankQuery","searchEngineQuery","keywords","urls","searchEngines","query","error","result","scrapFunction"],"mappings":";;;;;AAAA,IAAMA,UAAUC,QAAQ,gBAAR,CAAhB;;AAEA,IAAMC,MAAMD,QAAQ,YAAR,CAAZ;AACA,IAAME,YAAYF,QAAQ,kBAAR,CAAlB;AACA,IAAMG,QAAQH,QAAQ,cAAR,CAAd;AACA,IAAMI,SAASJ,QAAQ,eAAR,CAAf;;AAEA,IAAMK,eAAeL,QAAQ,+BAAR,CAArB;AACA,IAAMM,SAASN,QAAQ,QAAR,CAAf;AACA,IAAMO,cAAcP,QAAQ,oBAAR,CAApB;;kBAEe,UAACQ,EAAD,EAAKC,QAAL,EAAkB;AAC/B,MAAMC,QAAQ,IAAIC,IAAJ,GAAWC,OAAX,EAAd;;AAEA;AACA,MAAMC,eAAe,kJAArB;AACA,MAAMC,WAAW,gKAAjB;AACA,MAAMC,YAAY,mBAAlB;AACA,MAAMC,oBAAoB,oGAA1B;;AAEA,MAAIC,iBAAJ;AACA,MAAIC,aAAJ;AACA,MAAIC,sBAAJ;;AAEAX,KAAGY,KAAH,CAASJ,iBAAT,EAA4B,UAACK,KAAD,EAAQC,MAAR,EAAmB;AAC7CH,oBAAgBG,MAAhB;AACEd,OAAGY,KAAH,CAASP,YAAT,EAAuB,UAACQ,KAAD,EAAQC,MAAR,EAAmB;AACxC,UAAID,KAAJ,EAAW,MAAMA,KAAN;AACXJ,iBAAWK,MAAX;AACAd,SAAGY,KAAH,CAASN,QAAT,EAAmB,UAACO,KAAD,EAAQC,MAAR,EAAmB;AACpC,YAAID,KAAJ,EAAW,MAAMA,KAAN;AACXH,eAAOI,MAAP;;AAEAf,oBAAYgB,aAAZ,CAA0Bf,EAA1B,EAA8BC,QAA9B,EAAwCU,aAAxC,EAAuDF,QAAvD,EAAiEC,IAAjE;AAEC,OANH;AAOD,KAVD;AAWD,GAbH;;AAeA;;AAEA;AAED,C","file":"scrapAndWriteToDb.js","sourcesContent":["const forEach = require('lodash/forEach');\n\nconst map = require('lodash/map');\nconst findIndex = require('lodash/findIndex');\nconst merge = require('lodash/merge');\nconst sortBy = require('lodash/sortBy');\n\nconst appConstants = require('../../helpers/appConstants.js');\nconst moment = require('moment');\nconst scrapModule = require('./scrapFunction.js');\n\nexport default (db, taskList) => {\n  const start = new Date().getTime();\n\n  // query DB for all keywords\n  const keywordQuery = 'select k.keyword, k.id as keywordId, k.isImportant as isImportant, d.domain, d.id as domainId from keywords k, domains d where k.domainId = d.id';\n  const urlQuery = 'SELECT u.id as urlId, u.url, cn.name, cn.id as companyId, d.domain from urls u, domains d, companynames cn where d.id = u.domainId AND u.companynameId = cn.id';\n  const rankQuery = 'INSERT INTO ranks'\n  const searchEngineQuery = 'SELECT id as searchEngineId, name as searchEngineName, value as searchEngineUrl from searchengines';\n\n  let keywords;\n  let urls;\n  let searchEngines;\n\n  db.query(searchEngineQuery, (error, result) => {\n    searchEngines = result;\n      db.query(keywordQuery, (error, result) => {\n        if (error) throw error;\n        keywords = result;\n        db.query(urlQuery, (error, result) => {\n          if (error) throw error;\n          urls = result;\n\n          scrapModule.scrapFunction(db, taskList, searchEngines, keywords, urls);\n\n          });\n      });\n    });\n\n  // For all scrap data\n\n  // Once scrapped write in the db\n\n}\n"]}