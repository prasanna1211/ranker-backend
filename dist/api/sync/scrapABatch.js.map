{"version":3,"sources":["../../../src/api/sync/scrapABatch.js"],"names":["bluebird","require","cron","map","random","filter","findIndex","moment","googleResult","rankWriteDbQuery","rank","logDate","companyId","keywordId","searchEngineId","scrapABatch","db","taskList","batch","currentBatchNumber","urls","console","log","length","currentDate","startOf","format","k","keyword","isImportant","domain","domainId","keywordScrapStartTime","parseInt","cronString","module","exports","scrap"],"mappings":";;AAAA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAIC,OAAOD,QAAQ,WAAR,CAAX;;AAEA,IAAME,MAAMF,QAAQ,YAAR,CAAZ;AACA,IAAMG,SAASH,QAAQ,eAAR,CAAf;AACA,IAAMI,SAASJ,QAAQ,eAAR,CAAf;AACA,IAAMK,YAAYL,QAAQ,kBAAR,CAAlB;AACA,IAAMM,SAASN,QAAQ,QAAR,CAAf;;AAEA,IAAMO,eAAeP,QAAQ,kCAAR,CAArB;;AAEA,IAAMQ,mBAAmB,SAAnBA,gBAAmB,CAACC,IAAD,EAAOC,OAAP,EAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,cAAtC;AAAA,8FAA4IJ,IAA5I,WAAsJC,OAAtJ,WAAmKC,SAAnK,UAAiLC,SAAjL,UAA+LC,cAA/L;AAAA,CAAzB;;AAEA,IAAMC,cAAc,SAAdA,WAAc,CAACC,EAAD,EAAKC,QAAL,EAAeC,KAAf,EAAsBC,kBAAtB,EAA0CC,IAA1C,EAAmD;AACrEC,UAAQC,GAAR,CAAY,OAAZ,EAAqBJ,KAArB;AACA,MAAI,CAACA,MAAMK,MAAX,EAAmB;AACjB,WAAO,EAAP;AACD;;AAED,MAAMC,cAAcjB,SAASkB,OAAT,CAAiB,KAAjB,EAAwBC,MAAxB,CAA+B,YAA/B,CAApB;;AAEA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIT,MAAMK,MAA1B,EAAkCI,GAAlC,EAAuC;AAAA,mBAEyBT,MAAMS,CAAN,CAFzB;AAAA,QAE7BC,OAF6B,YAE7BA,OAF6B;AAAA,QAEpBf,SAFoB,YAEpBA,SAFoB;AAAA,QAETgB,WAFS,YAETA,WAFS;AAAA,QAEIC,MAFJ,YAEIA,MAFJ;AAAA,QAEYC,QAFZ,YAEYA,QAFZ;;AAGrC,QAAMC,8BAA2B,KAAML,IAAI,EAAV,GAAgBM,SAAS7B,OAAO,CAAP,EAAU,CAAV,CAAT,CAA3C,CAAN;AACA,QAAM8B,oBAAkBF,qBAAlB,SAA2Cb,kBAA3C,WAAN;AACAE,YAAQC,GAAR,CAAY,0BAAZ,EAAwCY,UAAxC,EAAoDN,OAApD,EAA6DE,MAA7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACF,CApDD;;AAsDAK,OAAOC,OAAP,GAAiB;AACfC,SAAOtB;AADQ,CAAjB","file":"scrapABatch.js","sourcesContent":["const bluebird = require('bluebird');\nlet cron = require('node-cron');\n\nconst map = require('lodash/map');\nconst random = require('lodash/random');\nconst filter = require('lodash/filter');\nconst findIndex = require('lodash/findIndex');\nconst moment = require('moment');\n\nconst googleResult = require('../../helpers/getGoogleResult.js');\n\nconst rankWriteDbQuery = (rank, logDate, companyId, keywordId, searchEngineId) => `INSERT INTO ranks (rank, logDate, companyId, keywordId, searchEngineId) VALUES (${rank}, \"${logDate}\", ${companyId}, ${keywordId}, ${searchEngineId})`;\n\nconst scrapABatch = (db, taskList, batch, currentBatchNumber, urls) => {\n  console.log('batch', batch);\n  if (!batch.length) {\n    return [];\n  }\n\n  const currentDate = moment().startOf('day').format('YYYY-MM-DD');\n\n  for (var k = 0; k < batch.length; k++) {\n\n    const { keyword, keywordId, isImportant, domain, domainId } = batch[k];\n    const keywordScrapStartTime = `${13 + (k * 10) + parseInt(random(0, 2))}`;\n    const cronString = `0 ${keywordScrapStartTime} ${currentBatchNumber} * * *`;\n    console.log('scheduled for this hour ', cronString, keyword, domain);\n    // const cronString = `10 ${(0+(k*6))%60} 16 * * *`;\n    // taskList[currentBatchNumber][k] = cron.schedule(cronString, () => {\n    //   try {\n    //     const results = googleResult\n    //     .scrapeGoogleResult(keyword, 'https://www.google.co.in', 3)\n    //     .then((scrap) => {\n    //       if (scrap.success) {\n    //         // IF successs write it to db.\n    //         const currentUrls = filter(urls, url => url.domain === domain);\n    //         const resultWithRank = map(currentUrls, (urlData) => {\n    //           console.log('result: ', scrap.result, urlData.url, findIndex(scrap.result, urlData.url))\n    //           return {\n    //             ...urlData,\n    //             rank: findIndex(scrap.result, eachUrl => eachUrl === urlData.url)\n    //           }\n    //         });\n    //         console.log(resultWithRank);\n    //         map(resultWithRank, (result) => {\n    //           db.query(rankWriteDbQuery(rank, currentDate, result.companyId, keywordId, 1), (error, result) => {\n    //             if (error) {\n    //               console.log(error);\n    //             }\n    //             console.log('1 record successfully written')\n    //           });\n    //         });\n    //       } else if (scrap.error) {\n    //         console.log('error', scrap.error);\n    //         // Some internal error write to status db\n    //       }\n    //     console.log('finished');\n    //     });\n    //   } catch (e) {\n    //     // Some other error for this particular keyword.\n    //     // still write on error db\n    //   }\n    //\n    // });\n  }\n}\n\nmodule.exports = {\n  scrap: scrapABatch,\n}\n"]}